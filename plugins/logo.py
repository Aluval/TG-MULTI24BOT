from pyrogram import Client, filters, idle
import pyrogram, asyncio, random, time
from pyrogram.errors import FloodWait
from pyrogram.types import *
from variables import PICS, ADMIN
from utils.logo_maker import generate_logo


@Client.on_message(filters.command("logosq") & filters.incoming & filters.text & ~filters.forwarded & filters.private)
async def logosq(bot, message):
    try:
      text = message.text.replace("logosq","").replace("/","").replace("[·ó∑ET·ó©]","").strip().upper()
      
      if text == "":
        return await message.reply_text("**To Make Logo -** /logo Your Name\n**To Make Square Logo - ** /logosq Your Name\n\n**‚ôªÔ∏è Example:**\n/logo BETA\n/logosq BETA")
  
      x = await message.reply_text("`üîç Generating Logo For You...`")  
      logo = await generate_logo(text,True)
  
      if "graph.org" not in logo:
        return await x.edit("`‚ùå Something Went Wrong...`\n\nReport This Error In [UPDATES GRP](t.me/Sunrises_Bot_discussion_Group).")
        
      if "error" in logo:
        return await x.edit(f"`‚ùå Something Went Wrong...`\n\nReport This Error In [UPDATES GRP](t.me/Sunrises_Bot_discussion_Group). \n\n`{logo}`")
        
      await x.edit("`üîÑ Done Generated... Now Sending You`")
      
      logo_id = logo.replace("https://graph.org//file/","").replace(".jpg","").strip()
      
      await message.reply_photo(logo,caption = "**üñº Logo Generated By TG-MULTI-BOT**",reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="Upload As File üìÅ", callback_data=f"flogo {logo_id}")]]))
      await x.delete()
    except FloodWait:
      pass
    except Exception as e:
      try:
        await x.delete()
      except:
        pass
      return await message.reply_text("`‚ùå Something Went Wrong...`\n\nReport This Error In [·ó∑ET·ó©]")

@Client.on_message(filters.command("logo") & filters.incoming & filters.text & ~filters.forwarded & filters.private)
async def logo(bot, message):
  try:
    text = message.text.replace("logo","").replace("/","").replace("@sunriseseditsoffical6","").strip().upper()
    
    if text == "":
      return await message.reply_text("**To Make Logo -** /logo Your Name\n**To Make Square Logo - ** /logosq Your Name\n\n**‚ôªÔ∏è Example:**\n/logo BETA\n/logosq SUNRISES")

    x = await message.reply_text("`üîç Generating Logo For You...`")  
    logo = await generate_logo(text)

    if "graph.org" not in logo:
      return await x.edit("`‚ùå Something Went Wrong...`\n\nReport This Error In  [UPDATES GRP](t.me/Sunrises_Bot_discussion_Group).")
      
    if "error" in logo:
      return await x.edit(f"`‚ùå Something Went Wrong...`\n\nReport This Error In [UPDATES GRP](t.me/Sunrises_Bot_discussion_Group).\n\n`{logo}`")
      
    await x.edit("`üîÑ Done Generated... Now Sending You`")

    logo_id = logo.replace("https://graph.org//file/","").replace(".jpg","").strip()
    await message.reply_photo(logo,caption = "**üñº Logo Generated By TG MULTI 24 BOT**",reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="Upload As File üìÅ", callback_data=f"flogo {logo_id}")]]))
    await x.delete()
  except FloodWait:
    pass
  except Exception as e:
    try:
      await x.delete()
    except:
      pass
    return await message.reply_text("`‚ùå Something Went Wrong...`\n\nReport This Error In [·ó∑ET·ó©]")


@Client.on_callback_query(filters.regex("flogo"))
async def logo_doc(_,query):
  await query.answer()
  try:
    x = await query.message.reply_text("`üîÑ Sending You The Logo As File`")
    await query.message.edit_reply_markup(reply_markup=None)
    link = "https://graph.org//file/" + query.data.replace("flogo","").strip() + ".jpg"
    await query.message.reply_document(link,caption="**üñº Logo Generated By  TG MULTI 24 BOT**")
  except FloodWait:
    pass
  except Exception as e:
    try:
      return await x.edit(f"`‚ùå Something Went Wrong...`\n\nReport This Error In [UPDATES GROUP](t.me/Sunrises_Bot_discussion_Group) \n\n`{str(e)}`")
    except:
      return
    
  return await x.delete()
